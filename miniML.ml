(* Variables *)
type name = string

(* Primitive operations *)
type primop =
  | Equals        (* v1 = v2 *)
  | NotEquals     (* v1 != v2 *)
  | LessThan      (* i1 < i2 *)
  | LessEqual     (* i1 <= i2 *)
  | GreaterThan   (* i1 > i2 *)
  | GreaterEqual  (* i1 >= i2 *)
  | And           (* b1 && b2 *)
  | Or            (* b1 || b2 *)
  | Plus          (* i1 + i2 *)
  | Minus         (* i1 - i2 *)
  | Times         (* i1 * i2 *)
  | Div           (* i1 / i2 *)
  | Negate        (* ~ i *)

(* type exception *)
exception TypeError of string

let type_fail message = raise (TypeError message)

type typ =
  | TArrow   of typ * typ         (* a -> b *)
  | TProduct of typ list          (* a * b *)
  | TInt                          (* int *)
  | TBool                         (* bool *)
  | TVar     of (typ option) ref  (* Only used for Q6 and Q7 *)

let fresh_tvar () = TVar (ref None)

(* type equality ignoring TVar *)
let rec typ_eq t1 e2 =
  match (t1, e2) with
  | (TArrow (domain1, range1), TArrow (domain2, range2)) ->
     typ_eq domain1 domain2 && typ_eq range1 range2
  | (TProduct ts1, TProduct ts2) ->
     List.length ts1 = List.length ts2 && List.for_all2 typ_eq ts1 ts2
  | (TInt, TInt) -> true
  | (TBool, TBool) -> true
  | _ -> false

(* general exception *)
exception Stuck of string

let stuck message = raise (Stuck message)

type exp =
  | Int    of int                        (* 0 | 1 | 2 | ... *)
  | Bool   of bool                       (* true | false *)
  | If     of exp * exp * exp            (* if e then e1 else e2 *)
  | Primop of primop * exp list          (* e1 <op> e2  or  <op> e *)
  | Tuple  of exp list                   (* (e1, ..., eN) *)
  | Fn     of (name * typ option * exp)  (* fn x => e *)
  | Rec    of name * typ * exp           (* rec f => e *)
  | Let    of dec list * exp             (* let decs in e end *)
  | Apply  of exp * exp                  (* e1 e2 *)
  | Var    of name                       (* x *)
  | Anno   of exp * typ                  (* e : t *)

and dec =
  | Val      of exp * name               (* val x = e *)
  | Valtuple of exp * name list          (* val (x1,...,xN) = e *)
  | ByName   of exp * name               (* name x = e1 *)

let eval_op op args =
  match (op, args) with
  | (Equals,       [Int i1; Int i2])   -> Some (Bool (i1 = i2))
  | (NotEquals,    [Int i1; Int i2])   -> Some (Bool (i1 <> i2))
  | (LessThan,     [Int i1; Int i2])   -> Some (Bool (i1 < i2))
  | (LessEqual,    [Int i1; Int i2])   -> Some (Bool (i1 <= i2))
  | (GreaterThan,  [Int i1; Int i2])   -> Some (Bool (i1 > i2))
  | (GreaterEqual, [Int i1; Int i2])   -> Some (Bool (i1 >= i2))
  | (Plus,         [Int i1; Int i2])   -> Some (Int (i1 + i2))
  | (Minus,        [Int i1; Int i2])   -> Some (Int (i1 - i2))
  | (Times,        [Int i1; Int i2])   -> Some (Int (i1 * i2))
  | (Div,          [Int i1; Int i2])   -> Some (Int (i1 / i2))
  | (Negate,       [Int i])            -> Some (Int (-i))
  | _                                  -> None

type context = Ctx of (name * typ) list

(* Context manipulation helpers *)
exception NotFound

let ctx_lookup ctx x =
  let rec assoc x y =
    match y with
    | [] -> raise NotFound
    | (y, r) :: rest ->
       if x = y then
         r
       else
         assoc x rest
  in
  let Ctx list = ctx in assoc x list

let extend ctx (x, v) = let Ctx list = ctx in Ctx ((x,v)::list)

let rec extend_list ctx l =
  match l with
  | [] -> ctx
  | (x, y) :: pairs -> extend_list (extend ctx (x, y)) pairs

(* Replacement for the standard "result" type *)
type ('a, 'b) either =
  | Left of 'a
  | Right of 'b


let member = List.mem

let rec union xs ys =
  match xs with
  | [] -> ys
  | x :: xs ->
     if member x ys then
       union xs ys
     else
       x :: union xs ys

let union_list sets = List.fold_right union sets []

let rec delete ds set =
  match set with
  | [] -> []
  | h :: t ->
     if member h ds then
       delete ds t
     else
       h :: delete ds t


(* free name generator *)
let (fresh_var, reset_ctr) =
  let counter = ref 0 in
  ((fun x ->
    counter := !counter+1;
    string_of_int (!counter) ^ x),
   fun () ->
   counter := 0)

(* Update this to 1 or higher to get debug messages *)
let debug = ref 0

(* example valid MiniML programs *)

let valid_program_1 = "
let fun apply (f : int -> int) : int -> int =
          fn x : int => f(x)
in
  apply (fn x => x * 3) 100
end;
"

let valid_program_2 = "10 * 10 + 33;"

let valid_program_3 = "
let fun fact (x : int) : int =
  if x = 0 then 1
  else x * fact(x - 1)
in
  fact 5
end;
"

let valid_program_4 = "(if true then 3 else 5) : int;"

let valid_program_5 = "
let val x = 1
in
  x + 5
end;
"

let valid_program_6 = "
let val x = true
in
  let val x = 1
  in
    x + 5
  end
end;
"

let valid_program_7 = "
let name x = 3
in
  x + 1
end;
"

let valid_program_8 = "
let val (x,y) = (2 + 1, 2 * 50) in x * x * y end;
"

let valid_program_9 = "
let fun repeat (n : int) : (int -> int) -> int -> int =
          fn f : (int -> int) => fn x : int =>
            if n = 0 then x
            else repeat (n - 1) f (f(x))
in
 repeat 4 (fn z : int => z * 2) 100
 (* expected result: 100 * 2 * 2 * 2 * 2 = 1600 *)
end;
"

let valid_program_10 = "
let val f = let val ten = 10 in (fn y => ten) : int -> int end
in
  f 55
end;
"

module P : sig
  val parse : string -> (string, exp) either
end = struct
  exception Error of string

  type token =
    | VAR of string
    | VAL
    | TRUE
    | TIMES
    | THEN
    | SEMICOLON
    | RPAREN
    | PLUS
    | NUM of int
    | NEGATE
    | NAME
    | MINUS
    | DIV
    | LPAREN
    | LET
    | INT
    | IN
    | IF
    | FUN
    | FN
    | FALSE
    | EQUAL
    | NEQUAL
    | LT
    | GT
    | LE
    | GE
    | AND
    | OR
    | EOF
    | END
    | ELSE
    | DARROW
    | COMMA
    | COLON
    | BOOL
    | ARROW

  let token_to_str tok =
    match tok with
    | VAR x -> Format.sprintf "VAR %s" x
    | VAL -> "VAL"
    | TRUE -> "TRUE"
    | TIMES -> "TIMES"
    | THEN -> "THEN"
    | SEMICOLON -> "SEMICOLON"
    | RPAREN -> "RPAREN"
    | PLUS -> "PLUS"
    | NUM i -> Format.sprintf "NUM %d" i
    | NEGATE -> "NEGATE"
    | NAME -> "NAME"
    | MINUS -> "MINUS"
    | DIV -> "DIV"
    | LPAREN -> "LPAREN"
    | LET -> "LET"
    | INT -> "INT"
    | IN -> "IN"
    | IF -> "IF"
    | FUN -> "FUN"
    | FN -> "FN"
    | FALSE -> "FALSE"
    | EQUAL -> "EQUAL"
    | NEQUAL -> "NEQUAL"
    | LT -> "LT"
    | GT -> "GT"
    | LE -> "LE"
    | GE -> "GE"
    | AND -> "AND"
    | OR -> "OR"
    | EOF -> "EOF"
    | END -> "END"
    | ELSE -> "ELSE"
    | DARROW -> "DARROW"
    | COMMA -> "COMMA"
    | COLON -> "COLON"
    | BOOL -> "BOOL"
    | ARROW -> "ARROW"

  module S = struct

    type 'a t = Stream of (unit -> 'a front)
    and 'a front =
      | Nil
      | Cons of ('a * 'a t)

    let delay f =
      let memo = ref None in
      let memof () =
        match !memo with
        | Some g -> g
        | None   ->
           let r = f () in
           begin
             memo := Some r;
             r
           end
      in Stream memof

    let force (Stream f) = f ()

    let rec iterate f =
      delay (fun () ->
          match f () with
          | None -> Nil
          | Some x -> Cons (x, iterate f))

  end

  module MSGS = struct

    let rparen_or_comma = "expect a right parenthesis or a comma"
    let variable = "expect a variable"

  end

  let lexer_to_stream lexer (lexbuf : Lexing.lexbuf) =
    S.iterate (fun () -> Some (lexer lexbuf))

  let next_msg s msg =
    match S.force s with
    | S.Nil -> raise (Error msg)
    | S.Cons (h, t) -> (h, t)

  (* next s = (x,s'), where x is the head of s, s' the tail of s
    raises Error if stream is empty
   *)
  let next s = next_msg s "Unexpected end of stream"

  (* match tok s = s', s' is the tail of s
    raises Error if head of s does not match tok
   *)
  let tok_match tok s =
    let msg = Format.sprintf "Expected %s token" (token_to_str tok) in
    let (n, s') = next_msg s msg in
    if tok = n then s'
    else raise (Error msg)

  let build_primop e' (primop, e) =
    Primop (primop, [e'; e])

  let build_primops exp op_exps =
    List.fold_left build_primop exp op_exps

  (* parse_program r = (e,s')
    where e is the result of parsing the beginning of r
    and s' the unprocessed tail of r
   *)
  let rec parse_program r =
    let (e, s) = parse_exp (S.delay (fun () -> S.Cons r))
    in (e, tok_match SEMICOLON s)

  (* parse_factors: Recursively consume adjacent atomic factors (parse_factora),
    forming them into a chain of applications. *)
  and parse_factors s eo =
    match parse_factor_option s with
    | Some (e, s) ->
       begin match eo with
       | None -> parse_factors s (Some e)
       | Some f -> parse_factors s (Some (Apply (f, e)))
       end
    | None ->
       match eo with
       | None -> raise (Error "Expected expression")
       | Some e -> (e, s)

  and parse_factor es = parse_factors es None

  and parse_tuple s =
    let (e, s) = parse_exp s in
    let (n, s') = next_msg s MSGS.rparen_or_comma in
    if n = COMMA then
      let (es, s') = parse_tuple s' in
      (e :: es, s')
    else ([e], s)

  (* parse_factora (t,s) attempts to find an atomic expression (no applications)
    starting with the token t, perhaps continuing through the stream.
    Returns SOME(e, s) if the exp e was successfully recognized, with s
    the stream remaining after it.
    Returns NONE if the token cannot begin any exp.
    May raise exception Error if the input stream does not represent
    any valid MinML program. *)
  and parse_factora (tok, s) =
    match tok with
    | TRUE -> Some (Bool true, s)
    | FALSE -> Some (Bool false, s)
    | NUM n -> Some (Int n, s)
    | VAR v -> Some (Var v, s)
    | IF ->
       let (ec, s) = parse_exp s in
       let s = tok_match THEN s in
       let (et, s) = parse_exp s in
       let s = tok_match ELSE s in
       let (ef, s) = parse_exp s in
       Some (If (ec, et, ef), s)
    | LPAREN ->
       let (e, s) = parse_exp s in
       let (n, s) = next_msg s MSGS.rparen_or_comma in
       begin match n with
       | RPAREN -> Some (e, s)
       | COMMA ->
          let (es, s) = parse_tuple s in
          Some (Tuple (e :: es), tok_match RPAREN s)
       | _ -> raise (Error MSGS.rparen_or_comma)
       end
    | FN ->
       let (x, s) = parse_var s in
       let (n, s') = next_msg s "expect a colon or a =>" in
       let (t, s) =
         if n = COLON then
           let (t, s) = parse_type s' in
           (Some t, s)
         else (None, s) in
       let s = tok_match DARROW s in
       let (e, s) = parse_exp s in
       Some (Fn (x, t, e), s)
    | LET ->
       let (ds, s) = parse_decs s in
       let s = tok_match IN s in
       let (e, s) = parse_exp s in
       let s = tok_match END s in
       Some (Let (ds, e), s)
    | NEGATE ->
       begin match parse_factora (next_msg s "expect a operand after ~") with
       | None -> None
       | Some (e, s) -> Some (Primop (Negate, [e]), s)
       end
    | _ -> None

  and parse_dec t s =
    match t with
    | VAL ->
       let (n, s') = next_msg s "expect a variable or a left parenthesis" in
       if n = LPAREN then
         let (xs, s) = parse_tup_vars s' in
         let s = tok_match RPAREN s in
         let s = tok_match EQUAL s in
         let (e, s) = parse_exp s in
         (Valtuple (e, xs), s)
       else
         let (x, s) = parse_var s in
         let s = tok_match EQUAL s in
         let (e, s) = parse_exp s in
         (Val (e, x), s)
    | NAME ->
       let (x, s) = parse_var s in
       let s = tok_match EQUAL s in
       let (e, s) = parse_exp s in
       (ByName (e, x), s)
    | FUN ->
       let (f, s) = parse_var s in
       let (xs, s) = parse_args s in
       let s = tok_match COLON s in
       let (t, s) = parse_type s in
       let s = tok_match EQUAL s in
       let (e, s) = parse_exp s in
       let g (n, o) ts = match o with
         | Some t -> TArrow (t, ts)
         | None -> TArrow (TVar (ref None), ts)
       in
       let ft = List.fold_right g xs t in
       let e' = List.fold_right (fun (n, t) e -> Fn (n, t, e)) xs e in
       (Val (Rec (f, ft, e'), f), s)
    | _ -> raise (Error "shouldn't occur")

  and parse_decs s =
    let (n, s') = next_msg s "expect val, name, fun or in" in
    match n with
    | VAL | NAME | FUN ->
       let (d, s) = parse_dec n s' in
       let (ds, s) = parse_decs s in
       (d :: ds, s)
    | _ -> ([], s)

  and parse_args s =
    let (n, s') = next_msg s "expect a variable, left parenthesis or a colon" in
    match n with
    | VAR x ->
       let (xs, s) = parse_args s' in
       (x, None) :: xs, s
    | LPAREN ->
       let (x, s) = parse_var s' in
       let s = tok_match COLON s in
       let (t, s) = parse_type s in
       let s = tok_match RPAREN s in
       let (xs, s) = parse_args s in
       (x, Some t) :: xs, s
    | _ -> [], s

  and parse_var s =
    let (n, s) = next_msg s MSGS.variable in
    match n with
    | VAR x -> (x, s)
    | _ -> raise (Error MSGS.variable)

  and parse_tup_vars' s =
    let (x, s) = parse_var s in
    let (n, s') = next_msg s MSGS.rparen_or_comma in
    if n = COMMA then
      let (xs, s) = parse_tup_vars' s'
      in (x :: xs, s)
    else ([x], s)

  and parse_tup_vars s =
    let (x, s) = parse_var s in
    let s = tok_match COMMA s in
    let (xs, s) = parse_tup_vars' s in
    (x :: xs, s)

  and parse_factor_option s =
    match S.force s with
    | S.Nil -> None
    | S.Cons res -> parse_factora res

  and parse_or_aux acc s =
    let relop = match next s with
      | (OR, s) -> Some (Or, s)
      | _  -> None in
    match relop with
    | Some (op, s) ->
       let (e, s) = parse_and s
       in parse_or_aux (acc @ [(op, e)]) s
    | None -> (acc, s)

  and parse_or es =
    let (e, s) = parse_and es in
    let (exp's, s) = parse_or_aux [] s in
    (build_primops e exp's, s)

  and parse_exp s =
    let (e, s) = parse_or s in
    match next s with
    | COLON, s ->
       let (t, s) = parse_type s in
       (Anno (e, t), s)
    | _ -> e, s

  and parse_and_aux acc s =
    let relop = match next s with
      | (AND, s) -> Some (And, s)
      | _  -> None in
    match relop with
    | Some (op, s) ->
       let (e, s) = parse_and s
       in parse_and_aux (acc @ [(op, e)]) s
    | None -> (acc, s)

  and parse_and s =
    let (e, s) = parse_comp s in
    let (ands, s) = parse_and_aux [] s in
    build_primops e ands, s

  and parse_comp_aux acc s =
    let relop = match next s with
      | (EQUAL, s) -> Some (Equals, s)
      | (NEQUAL, s) -> Some (NotEquals, s)
      | (LT, s) -> Some (LessThan, s)
      | (LE, s) -> Some (LessEqual, s)
      | (GT, s) -> Some (GreaterThan, s)
      | (GE, s) -> Some (GreaterEqual, s)
      | _  -> None in
    match relop with
    | Some (op, s) ->
       let (e, s) = parse_comp s
       in parse_comp_aux (acc @ [(op, e)]) s
    | None -> (acc, s)

  and parse_comp s =
    let (e, s) = parse_exp' s in
    let (comps, s) = parse_comp_aux [] s in
    build_primops e comps, s

  and parse_exp'_aux acc s =
    let addop = match next s with
      | (PLUS, s) -> Some (Plus, s)
      | (MINUS, s) -> Some (Minus, s)
      | _ -> None
    in match addop with
       | Some (addop, s) ->
          let (e, s) = parse_term s in
          parse_exp'_aux (acc @ [(addop, e)]) s
       | None -> (acc, s)

  and parse_exp' es =
    let (e, s) = parse_term es in
    let (terms, s) = parse_exp'_aux [] s in
    build_primops e terms, s

  and parse_term_aux acc s =
    let mulop = match next s with
      | (TIMES, s) -> Some (Times, s)
      | (DIV, s) -> Some (Div, s)
      | _  -> None in
    match mulop with
    | Some (mulop, s) ->
       let (e, s) = parse_factor s in
       parse_term_aux (acc @ [(mulop, e)]) s
    | None -> (acc, s)

  and parse_term es =
    let (e, s) = parse_factor es in
    let (factors, s) = parse_term_aux [] s in
    build_primops e factors, s

  and parse_basetype (t, s) =
    match t with
    | INT -> (TInt, s)
    | BOOL -> (TBool, s)
    | LPAREN ->
       let (t, s) = parse_type s in
       let s = tok_match RPAREN s in
       (t, s)
    | _ -> raise (Error "expect a type")

  and parse_type_tup s =
    let (t, s) = parse_type s in
    let (n, s') = next_msg s "expect a tuple type" in
    if n = TIMES then
      let (ts, s) = parse_type_tup s' in
      (t :: ts, s)
    else ([t], s)

  and parse_type s =
    let (t, s) = next_msg s "expect a base type" in
    let (domain, s) = parse_basetype (t, s) in
    let (n, s') = next_msg s "expect ->, *, or nothing" in
    match n with
    | ARROW ->
       let (range, s) = parse_type s' in
       (TArrow (domain, range), s)
    | TIMES ->
       let (ts, s) = parse_type_tup s' in
       (TProduct (domain :: ts), s)
    | _ -> (domain, s)

  let parse_exp_semi s =
    let (e, s) = parse_exp s in
    let s = tok_match SEMICOLON s in
    (e, s)

  let parse_exps s =
    let rec helper s =
      try
        let (e, s) = parse_exp_semi s in
        let (es, s) = helper s in
        (e :: es, s)
      with
        Error _ -> ([], s)
    in
    let (e, s) = parse_exp_semi s in
    let (es, s) = helper s in
    (e :: es, s)

  let __ocaml_lex_tables = {
      Lexing.lex_base =
        "\000\000\215\255\079\000\154\000\218\255\164\000\239\000\058\001\
         \133\001\208\001\027\002\102\002\177\002\234\255\235\255\236\255\
         \001\000\239\255\240\255\001\000\001\000\003\000\030\000\031\000\
         \031\000\250\255\251\255\004\000\253\255\254\255\255\255\233\255\
         \249\255\247\255\244\255\243\255\242\255\241\255\238\255\252\002\
         \071\003\146\003\221\003\040\004\115\004\190\004\009\005\084\005\
         \159\005\234\005\053\006\128\006\203\006\022\007\097\007\172\007\
         \247\007\066\008\141\008\216\008\035\009\110\009\185\009\004\010\
         \079\010\154\010\229\010\048\011\123\011\198\011\099\011\252\255\
         \052\000\055\000\255\255\254\255\253\255";
      Lexing.lex_backtrk =
        "\255\255\255\255\039\000\038\000\255\255\039\000\039\000\039\000\
         \039\000\039\000\039\000\039\000\039\000\255\255\255\255\255\255\
         \018\000\255\255\255\255\255\255\255\255\010\000\009\000\255\255\
         \007\000\255\255\255\255\003\000\255\255\255\255\255\255\255\255\
         \255\255\255\255\255\255\255\255\255\255\255\255\255\255\039\000\
         \039\000\023\000\029\000\033\000\024\000\039\000\027\000\039\000\
         \039\000\039\000\025\000\028\000\039\000\039\000\039\000\026\000\
         \039\000\030\000\039\000\039\000\039\000\031\000\034\000\039\000\
         \032\000\039\000\039\000\035\000\039\000\036\000\255\255\255\255\
         \003\000\003\000\255\255\255\255\255\255";
      Lexing.lex_default =
        "\255\255\000\000\255\255\255\255\000\000\255\255\255\255\255\255\
         \255\255\255\255\255\255\255\255\255\255\000\000\000\000\000\000\
         \255\255\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
         \255\255\000\000\000\000\255\255\000\000\000\000\000\000\000\000\
         \000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\
         \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
         \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
         \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
         \255\255\255\255\255\255\255\255\255\255\255\255\071\000\000\000\
         \255\255\255\255\000\000\000\000\000\000";
      Lexing.lex_trans =
        "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
         \000\000\030\000\029\000\000\000\000\000\030\000\000\000\000\000\
         \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
         \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
         \030\000\023\000\000\000\000\000\000\000\000\000\020\000\036\000\
         \027\000\026\000\018\000\015\000\028\000\016\000\031\000\014\000\
         \004\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
         \003\000\003\000\013\000\025\000\022\000\024\000\021\000\038\000\
         \035\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\034\000\033\000\032\000\076\000\002\000\
         \075\000\002\000\012\000\002\000\002\000\008\000\010\000\002\000\
         \002\000\011\000\002\000\002\000\007\000\002\000\006\000\002\000\
         \002\000\002\000\002\000\002\000\009\000\002\000\005\000\002\000\
         \002\000\002\000\002\000\000\000\019\000\037\000\017\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\000\000\000\000\000\000\000\000\002\000\000\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\003\000\003\000\003\000\003\000\003\000\003\000\
         \003\000\003\000\003\000\003\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\000\000\000\000\
         \000\000\000\000\000\000\000\000\000\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\000\000\
         \001\000\000\000\000\000\002\000\000\000\068\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\000\000\000\000\000\000\000\000\002\000\000\000\
         \065\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\000\000\000\000\000\000\000\000\
         \000\000\000\000\000\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\000\000\000\000\000\000\
         \000\000\002\000\000\000\002\000\002\000\002\000\002\000\063\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\000\000\
         \000\000\000\000\000\000\000\000\000\000\000\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \000\000\000\000\000\000\000\000\002\000\000\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\059\000\002\000\058\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\
         \000\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\000\000\000\000\000\000\000\000\002\000\
         \000\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \052\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\053\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\000\000\000\000\000\000\
         \000\000\000\000\000\000\000\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\000\000\000\000\
         \000\000\000\000\002\000\000\000\047\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\046\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \045\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\000\000\000\000\000\000\000\000\002\000\000\000\002\000\
         \002\000\002\000\002\000\002\000\042\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\043\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\000\000\000\000\000\000\000\000\000\000\
         \000\000\000\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\000\000\000\000\000\000\000\000\
         \002\000\000\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \039\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\000\000\000\000\
         \000\000\000\000\000\000\000\000\000\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\000\000\
         \000\000\000\000\000\000\002\000\000\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\040\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\000\000\000\000\000\000\000\000\002\000\000\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\041\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\000\000\000\000\000\000\000\000\
         \000\000\000\000\000\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\000\000\000\000\000\000\
         \000\000\002\000\000\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\000\000\
         \000\000\000\000\000\000\000\000\000\000\000\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \000\000\000\000\000\000\000\000\002\000\000\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\
         \000\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\000\000\000\000\000\000\000\000\002\000\
         \000\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\044\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\000\000\000\000\000\000\
         \000\000\000\000\000\000\000\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\000\000\000\000\
         \000\000\000\000\002\000\000\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\000\000\000\000\000\000\000\000\002\000\000\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\051\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\000\000\000\000\000\000\000\000\000\000\
         \000\000\000\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\000\000\000\000\000\000\000\000\
         \002\000\000\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\000\000\000\000\
         \000\000\000\000\000\000\000\000\000\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\000\000\
         \000\000\000\000\000\000\002\000\000\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \048\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\000\000\000\000\000\000\000\000\002\000\000\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\049\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\000\000\000\000\000\000\000\000\
         \000\000\000\000\000\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\000\000\000\000\000\000\
         \000\000\002\000\000\000\002\000\002\000\002\000\002\000\050\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\000\000\
         \000\000\000\000\000\000\000\000\000\000\000\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \000\000\000\000\000\000\000\000\002\000\000\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\
         \000\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\000\000\000\000\000\000\000\000\002\000\
         \000\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\000\000\000\000\000\000\
         \000\000\000\000\000\000\000\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\000\000\000\000\
         \000\000\000\000\002\000\000\000\002\000\002\000\002\000\002\000\
         \056\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\000\000\000\000\000\000\000\000\002\000\000\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\054\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\000\000\000\000\000\000\000\000\000\000\
         \000\000\000\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\000\000\000\000\000\000\000\000\
         \002\000\000\000\002\000\002\000\002\000\002\000\055\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\000\000\000\000\
         \000\000\000\000\000\000\000\000\000\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\000\000\
         \000\000\000\000\000\000\002\000\000\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\000\000\000\000\000\000\000\000\002\000\000\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\057\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\000\000\000\000\000\000\000\000\
         \000\000\000\000\000\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\000\000\000\000\000\000\
         \000\000\002\000\000\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\000\000\
         \000\000\000\000\000\000\000\000\000\000\000\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \000\000\000\000\000\000\000\000\002\000\000\000\002\000\002\000\
         \002\000\062\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\
         \000\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\000\000\000\000\000\000\000\000\002\000\
         \000\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\060\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\000\000\000\000\000\000\
         \000\000\000\000\000\000\000\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\000\000\000\000\
         \000\000\000\000\002\000\000\000\002\000\002\000\002\000\002\000\
         \061\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\000\000\000\000\000\000\000\000\002\000\000\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\000\000\000\000\000\000\000\000\000\000\
         \000\000\000\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\000\000\000\000\000\000\000\000\
         \002\000\000\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\000\000\000\000\
         \000\000\000\000\000\000\000\000\000\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\000\000\
         \000\000\000\000\000\000\002\000\000\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \064\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\000\000\000\000\000\000\000\000\002\000\000\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\000\000\000\000\000\000\000\000\
         \000\000\000\000\000\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\000\000\000\000\000\000\
         \000\000\002\000\000\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\066\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\000\000\
         \000\000\000\000\000\000\000\000\000\000\000\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \000\000\000\000\000\000\000\000\002\000\000\000\002\000\002\000\
         \002\000\002\000\067\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\000\000\000\000\000\000\074\000\000\000\000\000\
         \000\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\072\000\000\000\073\000\000\000\002\000\
         \000\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\000\000\000\000\000\000\
         \000\000\000\000\000\000\000\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\000\000\000\000\
         \000\000\000\000\002\000\000\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\069\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\000\000\000\000\000\000\000\000\002\000\000\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
         \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
         \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
         \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
         \000\000\000\000\000\000\255\255\000\000\000\000\000\000\000\000\
         \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
         \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
         \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
         \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
         \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
         \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
         \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
         \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
         \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
         \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
         \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
         \000\000\000\000\000\000\000\000\000\000\000\000\000\000";
      Lexing.lex_check =
        "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
         \255\255\000\000\000\000\255\255\255\255\000\000\255\255\255\255\
         \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
         \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
         \000\000\000\000\255\255\255\255\255\255\255\255\000\000\020\000\
         \000\000\000\000\000\000\000\000\000\000\000\000\027\000\000\000\
         \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
         \000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\
         \021\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
         \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
         \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
         \000\000\000\000\000\000\022\000\023\000\024\000\072\000\000\000\
         \073\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
         \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
         \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
         \000\000\000\000\000\000\255\255\000\000\019\000\000\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\255\255\255\255\255\255\255\255\002\000\255\255\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
         \002\000\002\000\003\000\003\000\003\000\003\000\003\000\003\000\
         \003\000\003\000\003\000\003\000\005\000\005\000\005\000\005\000\
         \005\000\005\000\005\000\005\000\005\000\005\000\255\255\255\255\
         \255\255\255\255\255\255\255\255\255\255\005\000\005\000\005\000\
         \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
         \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
         \005\000\005\000\005\000\005\000\005\000\005\000\005\000\255\255\
         \000\000\255\255\255\255\005\000\255\255\005\000\005\000\005\000\
         \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
         \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
         \005\000\005\000\005\000\005\000\005\000\005\000\005\000\006\000\
         \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
         \006\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
         \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
         \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
         \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
         \006\000\006\000\255\255\255\255\255\255\255\255\006\000\255\255\
         \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
         \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
         \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
         \006\000\006\000\007\000\007\000\007\000\007\000\007\000\007\000\
         \007\000\007\000\007\000\007\000\255\255\255\255\255\255\255\255\
         \255\255\255\255\255\255\007\000\007\000\007\000\007\000\007\000\
         \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
         \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
         \007\000\007\000\007\000\007\000\007\000\255\255\255\255\255\255\
         \255\255\007\000\255\255\007\000\007\000\007\000\007\000\007\000\
         \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
         \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
         \007\000\007\000\007\000\007\000\007\000\008\000\008\000\008\000\
         \008\000\008\000\008\000\008\000\008\000\008\000\008\000\255\255\
         \255\255\255\255\255\255\255\255\255\255\255\255\008\000\008\000\
         \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
         \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
         \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
         \255\255\255\255\255\255\255\255\008\000\255\255\008\000\008\000\
         \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
         \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
         \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
         \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
         \009\000\009\000\255\255\255\255\255\255\255\255\255\255\255\255\
         \255\255\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
         \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
         \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
         \009\000\009\000\009\000\255\255\255\255\255\255\255\255\009\000\
         \255\255\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
         \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
         \009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
         \009\000\009\000\009\000\010\000\010\000\010\000\010\000\010\000\
         \010\000\010\000\010\000\010\000\010\000\255\255\255\255\255\255\
         \255\255\255\255\255\255\255\255\010\000\010\000\010\000\010\000\
         \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
         \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
         \010\000\010\000\010\000\010\000\010\000\010\000\255\255\255\255\
         \255\255\255\255\010\000\255\255\010\000\010\000\010\000\010\000\
         \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
         \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
         \010\000\010\000\010\000\010\000\010\000\010\000\011\000\011\000\
         \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
         \255\255\255\255\255\255\255\255\255\255\255\255\255\255\011\000\
         \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
         \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
         \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
         \011\000\255\255\255\255\255\255\255\255\011\000\255\255\011\000\
         \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
         \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
         \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
         \011\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
         \012\000\012\000\012\000\255\255\255\255\255\255\255\255\255\255\
         \255\255\255\255\012\000\012\000\012\000\012\000\012\000\012\000\
         \012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
         \012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
         \012\000\012\000\012\000\012\000\255\255\255\255\255\255\255\255\
         \012\000\255\255\012\000\012\000\012\000\012\000\012\000\012\000\
         \012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
         \012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
         \012\000\012\000\012\000\012\000\039\000\039\000\039\000\039\000\
         \039\000\039\000\039\000\039\000\039\000\039\000\255\255\255\255\
         \255\255\255\255\255\255\255\255\255\255\039\000\039\000\039\000\
         \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
         \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
         \039\000\039\000\039\000\039\000\039\000\039\000\039\000\255\255\
         \255\255\255\255\255\255\039\000\255\255\039\000\039\000\039\000\
         \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
         \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
         \039\000\039\000\039\000\039\000\039\000\039\000\039\000\040\000\
         \040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
         \040\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
         \040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
         \040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
         \040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
         \040\000\040\000\255\255\255\255\255\255\255\255\040\000\255\255\
         \040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
         \040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
         \040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
         \040\000\040\000\041\000\041\000\041\000\041\000\041\000\041\000\
         \041\000\041\000\041\000\041\000\255\255\255\255\255\255\255\255\
         \255\255\255\255\255\255\041\000\041\000\041\000\041\000\041\000\
         \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
         \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
         \041\000\041\000\041\000\041\000\041\000\255\255\255\255\255\255\
         \255\255\041\000\255\255\041\000\041\000\041\000\041\000\041\000\
         \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
         \041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
         \041\000\041\000\041\000\041\000\041\000\042\000\042\000\042\000\
         \042\000\042\000\042\000\042\000\042\000\042\000\042\000\255\255\
         \255\255\255\255\255\255\255\255\255\255\255\255\042\000\042\000\
         \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
         \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
         \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
         \255\255\255\255\255\255\255\255\042\000\255\255\042\000\042\000\
         \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
         \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
         \042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
         \043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
         \043\000\043\000\255\255\255\255\255\255\255\255\255\255\255\255\
         \255\255\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
         \043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
         \043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
         \043\000\043\000\043\000\255\255\255\255\255\255\255\255\043\000\
         \255\255\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
         \043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
         \043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
         \043\000\043\000\043\000\044\000\044\000\044\000\044\000\044\000\
         \044\000\044\000\044\000\044\000\044\000\255\255\255\255\255\255\
         \255\255\255\255\255\255\255\255\044\000\044\000\044\000\044\000\
         \044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
         \044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
         \044\000\044\000\044\000\044\000\044\000\044\000\255\255\255\255\
         \255\255\255\255\044\000\255\255\044\000\044\000\044\000\044\000\
         \044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
         \044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
         \044\000\044\000\044\000\044\000\044\000\044\000\045\000\045\000\
         \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
         \255\255\255\255\255\255\255\255\255\255\255\255\255\255\045\000\
         \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
         \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
         \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
         \045\000\255\255\255\255\255\255\255\255\045\000\255\255\045\000\
         \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
         \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
         \045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
         \045\000\046\000\046\000\046\000\046\000\046\000\046\000\046\000\
         \046\000\046\000\046\000\255\255\255\255\255\255\255\255\255\255\
         \255\255\255\255\046\000\046\000\046\000\046\000\046\000\046\000\
         \046\000\046\000\046\000\046\000\046\000\046\000\046\000\046\000\
         \046\000\046\000\046\000\046\000\046\000\046\000\046\000\046\000\
         \046\000\046\000\046\000\046\000\255\255\255\255\255\255\255\255\
         \046\000\255\255\046\000\046\000\046\000\046\000\046\000\046\000\
         \046\000\046\000\046\000\046\000\046\000\046\000\046\000\046\000\
         \046\000\046\000\046\000\046\000\046\000\046\000\046\000\046\000\
         \046\000\046\000\046\000\046\000\047\000\047\000\047\000\047\000\
         \047\000\047\000\047\000\047\000\047\000\047\000\255\255\255\255\
         \255\255\255\255\255\255\255\255\255\255\047\000\047\000\047\000\
         \047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
         \047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
         \047\000\047\000\047\000\047\000\047\000\047\000\047\000\255\255\
         \255\255\255\255\255\255\047\000\255\255\047\000\047\000\047\000\
         \047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
         \047\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
         \047\000\047\000\047\000\047\000\047\000\047\000\047\000\048\000\
         \048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
         \048\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
         \048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
         \048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
         \048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
         \048\000\048\000\255\255\255\255\255\255\255\255\048\000\255\255\
         \048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
         \048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
         \048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
         \048\000\048\000\049\000\049\000\049\000\049\000\049\000\049\000\
         \049\000\049\000\049\000\049\000\255\255\255\255\255\255\255\255\
         \255\255\255\255\255\255\049\000\049\000\049\000\049\000\049\000\
         \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
         \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
         \049\000\049\000\049\000\049\000\049\000\255\255\255\255\255\255\
         \255\255\049\000\255\255\049\000\049\000\049\000\049\000\049\000\
         \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
         \049\000\049\000\049\000\049\000\049\000\049\000\049\000\049\000\
         \049\000\049\000\049\000\049\000\049\000\050\000\050\000\050\000\
         \050\000\050\000\050\000\050\000\050\000\050\000\050\000\255\255\
         \255\255\255\255\255\255\255\255\255\255\255\255\050\000\050\000\
         \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
         \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
         \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
         \255\255\255\255\255\255\255\255\050\000\255\255\050\000\050\000\
         \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
         \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
         \050\000\050\000\050\000\050\000\050\000\050\000\050\000\050\000\
         \051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
         \051\000\051\000\255\255\255\255\255\255\255\255\255\255\255\255\
         \255\255\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
         \051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
         \051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
         \051\000\051\000\051\000\255\255\255\255\255\255\255\255\051\000\
         \255\255\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
         \051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
         \051\000\051\000\051\000\051\000\051\000\051\000\051\000\051\000\
         \051\000\051\000\051\000\052\000\052\000\052\000\052\000\052\000\
         \052\000\052\000\052\000\052\000\052\000\255\255\255\255\255\255\
         \255\255\255\255\255\255\255\255\052\000\052\000\052\000\052\000\
         \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
         \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
         \052\000\052\000\052\000\052\000\052\000\052\000\255\255\255\255\
         \255\255\255\255\052\000\255\255\052\000\052\000\052\000\052\000\
         \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
         \052\000\052\000\052\000\052\000\052\000\052\000\052\000\052\000\
         \052\000\052\000\052\000\052\000\052\000\052\000\053\000\053\000\
         \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
         \255\255\255\255\255\255\255\255\255\255\255\255\255\255\053\000\
         \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
         \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
         \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
         \053\000\255\255\255\255\255\255\255\255\053\000\255\255\053\000\
         \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
         \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
         \053\000\053\000\053\000\053\000\053\000\053\000\053\000\053\000\
         \053\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
         \054\000\054\000\054\000\255\255\255\255\255\255\255\255\255\255\
         \255\255\255\255\054\000\054\000\054\000\054\000\054\000\054\000\
         \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
         \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
         \054\000\054\000\054\000\054\000\255\255\255\255\255\255\255\255\
         \054\000\255\255\054\000\054\000\054\000\054\000\054\000\054\000\
         \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
         \054\000\054\000\054\000\054\000\054\000\054\000\054\000\054\000\
         \054\000\054\000\054\000\054\000\055\000\055\000\055\000\055\000\
         \055\000\055\000\055\000\055\000\055\000\055\000\255\255\255\255\
         \255\255\255\255\255\255\255\255\255\255\055\000\055\000\055\000\
         \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
         \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
         \055\000\055\000\055\000\055\000\055\000\055\000\055\000\255\255\
         \255\255\255\255\255\255\055\000\255\255\055\000\055\000\055\000\
         \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
         \055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
         \055\000\055\000\055\000\055\000\055\000\055\000\055\000\056\000\
         \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
         \056\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
         \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
         \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
         \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
         \056\000\056\000\255\255\255\255\255\255\255\255\056\000\255\255\
         \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
         \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
         \056\000\056\000\056\000\056\000\056\000\056\000\056\000\056\000\
         \056\000\056\000\057\000\057\000\057\000\057\000\057\000\057\000\
         \057\000\057\000\057\000\057\000\255\255\255\255\255\255\255\255\
         \255\255\255\255\255\255\057\000\057\000\057\000\057\000\057\000\
         \057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
         \057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
         \057\000\057\000\057\000\057\000\057\000\255\255\255\255\255\255\
         \255\255\057\000\255\255\057\000\057\000\057\000\057\000\057\000\
         \057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
         \057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
         \057\000\057\000\057\000\057\000\057\000\058\000\058\000\058\000\
         \058\000\058\000\058\000\058\000\058\000\058\000\058\000\255\255\
         \255\255\255\255\255\255\255\255\255\255\255\255\058\000\058\000\
         \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
         \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
         \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
         \255\255\255\255\255\255\255\255\058\000\255\255\058\000\058\000\
         \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
         \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
         \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
         \059\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
         \059\000\059\000\255\255\255\255\255\255\255\255\255\255\255\255\
         \255\255\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
         \059\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
         \059\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
         \059\000\059\000\059\000\255\255\255\255\255\255\255\255\059\000\
         \255\255\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
         \059\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
         \059\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
         \059\000\059\000\059\000\060\000\060\000\060\000\060\000\060\000\
         \060\000\060\000\060\000\060\000\060\000\255\255\255\255\255\255\
         \255\255\255\255\255\255\255\255\060\000\060\000\060\000\060\000\
         \060\000\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
         \060\000\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
         \060\000\060\000\060\000\060\000\060\000\060\000\255\255\255\255\
         \255\255\255\255\060\000\255\255\060\000\060\000\060\000\060\000\
         \060\000\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
         \060\000\060\000\060\000\060\000\060\000\060\000\060\000\060\000\
         \060\000\060\000\060\000\060\000\060\000\060\000\061\000\061\000\
         \061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
         \255\255\255\255\255\255\255\255\255\255\255\255\255\255\061\000\
         \061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
         \061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
         \061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
         \061\000\255\255\255\255\255\255\255\255\061\000\255\255\061\000\
         \061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
         \061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
         \061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
         \061\000\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
         \062\000\062\000\062\000\255\255\255\255\255\255\255\255\255\255\
         \255\255\255\255\062\000\062\000\062\000\062\000\062\000\062\000\
         \062\000\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
         \062\000\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
         \062\000\062\000\062\000\062\000\255\255\255\255\255\255\255\255\
         \062\000\255\255\062\000\062\000\062\000\062\000\062\000\062\000\
         \062\000\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
         \062\000\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
         \062\000\062\000\062\000\062\000\063\000\063\000\063\000\063\000\
         \063\000\063\000\063\000\063\000\063\000\063\000\255\255\255\255\
         \255\255\255\255\255\255\255\255\255\255\063\000\063\000\063\000\
         \063\000\063\000\063\000\063\000\063\000\063\000\063\000\063\000\
         \063\000\063\000\063\000\063\000\063\000\063\000\063\000\063\000\
         \063\000\063\000\063\000\063\000\063\000\063\000\063\000\255\255\
         \255\255\255\255\255\255\063\000\255\255\063\000\063\000\063\000\
         \063\000\063\000\063\000\063\000\063\000\063\000\063\000\063\000\
         \063\000\063\000\063\000\063\000\063\000\063\000\063\000\063\000\
         \063\000\063\000\063\000\063\000\063\000\063\000\063\000\064\000\
         \064\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
         \064\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
         \064\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
         \064\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
         \064\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
         \064\000\064\000\255\255\255\255\255\255\255\255\064\000\255\255\
         \064\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
         \064\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
         \064\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
         \064\000\064\000\065\000\065\000\065\000\065\000\065\000\065\000\
         \065\000\065\000\065\000\065\000\255\255\255\255\255\255\255\255\
         \255\255\255\255\255\255\065\000\065\000\065\000\065\000\065\000\
         \065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
         \065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
         \065\000\065\000\065\000\065\000\065\000\255\255\255\255\255\255\
         \255\255\065\000\255\255\065\000\065\000\065\000\065\000\065\000\
         \065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
         \065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
         \065\000\065\000\065\000\065\000\065\000\066\000\066\000\066\000\
         \066\000\066\000\066\000\066\000\066\000\066\000\066\000\255\255\
         \255\255\255\255\255\255\255\255\255\255\255\255\066\000\066\000\
         \066\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
         \066\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
         \066\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
         \255\255\255\255\255\255\255\255\066\000\255\255\066\000\066\000\
         \066\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
         \066\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
         \066\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
         \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
         \067\000\067\000\255\255\255\255\255\255\070\000\255\255\255\255\
         \255\255\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
         \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
         \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
         \067\000\067\000\067\000\070\000\255\255\070\000\255\255\067\000\
         \255\255\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
         \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
         \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
         \067\000\067\000\067\000\068\000\068\000\068\000\068\000\068\000\
         \068\000\068\000\068\000\068\000\068\000\255\255\255\255\255\255\
         \255\255\255\255\255\255\255\255\068\000\068\000\068\000\068\000\
         \068\000\068\000\068\000\068\000\068\000\068\000\068\000\068\000\
         \068\000\068\000\068\000\068\000\068\000\068\000\068\000\068\000\
         \068\000\068\000\068\000\068\000\068\000\068\000\255\255\255\255\
         \255\255\255\255\068\000\255\255\068\000\068\000\068\000\068\000\
         \068\000\068\000\068\000\068\000\068\000\068\000\068\000\068\000\
         \068\000\068\000\068\000\068\000\068\000\068\000\068\000\068\000\
         \068\000\068\000\068\000\068\000\068\000\068\000\069\000\069\000\
         \069\000\069\000\069\000\069\000\069\000\069\000\069\000\069\000\
         \255\255\255\255\255\255\255\255\255\255\255\255\255\255\069\000\
         \069\000\069\000\069\000\069\000\069\000\069\000\069\000\069\000\
         \069\000\069\000\069\000\069\000\069\000\069\000\069\000\069\000\
         \069\000\069\000\069\000\069\000\069\000\069\000\069\000\069\000\
         \069\000\255\255\255\255\255\255\255\255\069\000\255\255\069\000\
         \069\000\069\000\069\000\069\000\069\000\069\000\069\000\069\000\
         \069\000\069\000\069\000\069\000\069\000\069\000\069\000\069\000\
         \069\000\069\000\069\000\069\000\069\000\069\000\069\000\069\000\
         \069\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
         \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
         \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
         \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
         \255\255\255\255\255\255\070\000\255\255\255\255\255\255\255\255\
         \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
         \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
         \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
         \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
         \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
         \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
         \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
         \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
         \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
         \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
         \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
         \255\255\255\255\255\255\255\255\255\255\255\255\255\255";
      Lexing.lex_base_code =
        "";
      Lexing.lex_backtrk_code =
        "";
      Lexing.lex_default_code =
        "";
      Lexing.lex_trans_code =
        "";
      Lexing.lex_check_code =
        "";
      Lexing.lex_code =
        "";
    }

  let rec lex n lexbuf =
    __ocaml_lex_lex_rec n lexbuf 0
  and __ocaml_lex_lex_rec n lexbuf __ocaml_lex_state =
    match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
    | 0 ->
       (lex n lexbuf)

    | 1 ->
       (Lexing.new_line lexbuf; lex n lexbuf)

    | 2 ->
       (COMMA)

    | 3 ->
       (LPAREN)

    | 4 ->
       (RPAREN)

    | 5 ->
       (SEMICOLON)

    | 6 ->
       (DARROW)

    | 7 ->
       (EQUAL)

    | 8 ->
       (NEQUAL)

    | 9 ->
       (LT)

    | 10 ->
       (GT)

    | 11 ->
       (LE)

    | 12 ->
       (GE)

    | 13 ->
       (AND)

    | 14 ->
       (OR)

    | 15 ->
       (TIMES)

    | 16 ->
       (NEGATE)

    | 17 ->
       (ARROW)

    | 18 ->
       (MINUS)

    | 19 ->
       (PLUS)

    | 20 ->
       (DIV)

    | 21 ->
       (COLON)

    | 22 ->
       (n := 1; comment n lexbuf)

    | 23 ->
       (BOOL)

    | 24 ->
       (INT)

    | 25 ->
       (FALSE)

    | 26 ->
       (TRUE)

    | 27 ->
       (FN)

    | 28 ->
       (FUN)

    | 29 ->
       (IF)

    | 30 ->
       (THEN)

    | 31 ->
       (ELSE)

    | 32 ->
       (LET)

    | 33 ->
       (IN)

    | 34 ->
       (END)

    | 35 ->
       (NAME)

    | 36 ->
       (VAL)

    | 37 ->
       (NUM 0)

    | 38 ->
       let
         n
         = Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
       (NUM (int_of_string n))

    | 39 ->
       let
         i
         = Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
       (VAR i)

    | 40 ->
       (EOF)

    | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
                           __ocaml_lex_lex_rec n lexbuf __ocaml_lex_state

  and comment n lexbuf =
    __ocaml_lex_comment_rec n lexbuf 70
  and __ocaml_lex_comment_rec n lexbuf __ocaml_lex_state =
    match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
    | 0 ->
       (Lexing.new_line lexbuf; comment n lexbuf)

    | 1 ->
       (if !n > 1 then
          (n := (!n-1); comment n lexbuf)
        else
          (n := 0; lex n lexbuf))

    | 2 ->
       (n := (!n + 1); comment n lexbuf)

    | 3 ->
       (comment n lexbuf)

    | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
                           __ocaml_lex_comment_rec n lexbuf __ocaml_lex_state

  let parse input =
    let n = ref 0 in
    let lexer = fun lexbuf -> if !n = 0 then lex n lexbuf else comment n lexbuf in
    let lexbuf = Lexing.from_string input in
    let s = lexer_to_stream lexer lexbuf in
    try
      let (e, s) = parse_exp_semi s in
      ignore (tok_match EOF s);
      Right e
    with
    | Error err -> Left err
end

module Print : sig
  val exp_to_string : exp -> string
  val typ_to_string : typ -> string
end = struct
  let rec separate separator f l =
    match l with
    | []       -> ""
    | [x]      -> f x
    | x1 :: xs -> f x1 ^ separator ^ separate separator f xs

  let paren lvl oplvl string =
    if oplvl < lvl then
      "(" ^ string ^ ")"
    else
      string

  let rec assoc_opt l r =
    match l with
    | [] -> None
    | (a, r') :: l' -> if r = r' then Some a else assoc_opt l' r

  let po_prec p =
    match p with
    | Or           -> 1
    | And          -> 2
    | Equals       -> 3
    | NotEquals    -> 3
    | LessThan     -> 3
    | GreaterThan  -> 3
    | LessEqual    -> 3
    | GreaterEqual -> 3
    | Plus         -> 4
    | Minus        -> 4
    | Times        -> 5
    | Div          -> 5
    | Negate       -> 7

  let po_to_str p =
    match p with
    | Or           -> "||"
    | And          -> "&&"
    | Equals       -> "="
    | NotEquals    -> "!="
    | LessThan     -> "<"
    | GreaterThan  -> ">"
    | LessEqual    -> "<="
    | GreaterEqual -> ">="
    | Plus         -> "+"
    | Minus        -> "-"
    | Times        -> "*"
    | Div          -> "/"
    | Negate       -> "~"

  let typ_to_string ty =
    let counter = ref 0 in
    let freshVar () =
      counter := !counter + 1;
      "a" ^ (string_of_int !counter)
    in
    let rec typstr lvl l ty =
      match ty with
      | TArrow (domain, range) ->
         let (l', t) = typstr 1 l domain in
         let (l'', t') = typstr 0 l' range in
         (l'', paren lvl 0 (t ^ " -> " ^ t'))
      | TProduct [] -> (l, "()")
      | TProduct [x] -> typstr lvl l x
      | TProduct (t :: ts) ->
         let f = fun (l, t) p ->
           let (l', t') = typstr 2 l p in
           (l', t ^ " * " ^ t')
         in
         let (l', t') = List.fold_left f (typstr 2 l t) ts in
         (l', paren lvl 1 t')
      | TInt -> (l, "int")
      | TBool -> (l, "bool")
      | TVar x ->
         match !x with
         | None ->
            begin match assoc_opt l x with
            | None -> let a = freshVar () in ((a, x) :: l, a)
            | Some a -> (l, a)
            end
         | Some t -> typstr 1 l t
    in
    let (_, s) = typstr 0 [] ty in
    s

  let rec expstr lvl e =
    match e with
    | Int i -> string_of_int i
    | Bool b -> string_of_bool b
    | If (ec, et, ef) ->
       paren lvl 1 ("if " ^ expstr 2 ec ^ " then " ^ expstr 2 et ^ " else " ^ expstr 2 ef)
    | Primop (p, []) -> "(bad primop)"
    | Primop (p, [e]) -> paren lvl 7 (po_to_str p ^ expstr 7 e)
    | Primop (p, e :: es) ->
       let expstr' b a = b ^ " " ^ po_to_str p ^ " " ^ (expstr (po_prec p) a) in
       paren lvl (po_prec p) (List.fold_left expstr' (expstr (po_prec p) e) es)
    | Tuple es -> "(" ^ separate ", " (expstr 0) es ^ ")"
    | Fn (x, t, e) ->
       begin match t with
       | None -> paren lvl 2 ("fn " ^ x ^  " => " ^ expstr 0 e)
       | Some t -> paren lvl 2 ("fn " ^ x ^ ": " ^ typ_to_string t ^ " => " ^ expstr 0 e)
       end
    | Rec (ff, ftype, e) ->
       paren lvl 2 ("rec " ^ ff ^  " : " ^ typ_to_string ftype ^ " => " ^ expstr 0 e)
    | Let (decs, e) ->
       "let " ^ separate "\n    " decstr decs ^ " in " ^ expstr 0 e ^ " end"
    | Apply (e1, e2) ->
       paren lvl 6 ((expstr 6 e1) ^ " " ^ (expstr 7 e2))
    | Var v -> v
    | Anno (e, t) -> paren lvl 0 (expstr 1 e ^ " : " ^ typ_to_string t)

  and decstr e =
    match e with
    | Val (Rec (ff, ftype, Fn (x, _, body)), gg)
         when ff = gg ->
       "fun " ^ ff ^ " : " ^ typ_to_string ftype ^ " " ^ x ^  " = " ^ expstr 0 body
    | Val (e1, x) ->
       "val " ^ x ^ " = " ^ expstr 0 e1
    | ByName (e1, x) ->
       "name " ^ x ^ " = " ^ expstr 0 e1
    | Valtuple (e1, xs) ->
       "val (" ^ separate ", " (fun name -> name) xs ^ ") = " ^ expstr 0 e1

  let exp_to_string e = expstr 0 e

  let rec ast_to_string e =
    match e with
    | Int i -> "Int (" ^ string_of_int i ^ ")"
    | Bool b -> "Bool " ^ string_of_bool b
    | If (ec, et, ef) ->
       "If (" ^ ast_to_string ec ^  ", " ^ ast_to_string et ^ ", " ^ ast_to_string ef ^ ")"
    | Primop (p, es) -> "Primop (" ^ po_to_str p ^ ", [" ^ separate ", " ast_to_string es ^ "])"
    | Tuple es -> "Tuple (" ^ separate ", " ast_to_string es ^ ")"
    | Fn (x, t, e) ->
       begin match t with
       | None -> "Fn (" ^ x ^  ", None, " ^ ast_to_string e ^ ")"
       | Some t -> "Fn (" ^ x ^  ", Some (" ^ ast_typ_to_string t ^ "), " ^ ast_to_string e ^ ")"
       end
    | Rec (ff, ftype, e) ->
       "Rec (" ^ ff ^  ", " ^ ast_typ_to_string ftype ^ ", " ^ ast_to_string e ^ ")"
    | Let (decs, e) ->
       "Let ([" ^ separate "; " ast_decstr decs ^ "], " ^ ast_to_string e ^ ")"
    | Apply (e1, e2) ->
       "Apply (" ^ ast_to_string e1 ^ ", " ^ ast_to_string e2 ^ ")"
    | Var v -> "Var " ^ v
    | Anno (e, t) -> "Anno (" ^ ast_to_string e ^ ", " ^ ast_typ_to_string t ^ ")"

  and ast_decstr e =
    match e with
    | Val (e1, x) ->
       "Val (" ^ ast_to_string e1 ^ ", " ^ x ^ ")"
    | ByName (e1, x) ->
       "ByName (" ^ ast_to_string e1 ^ ", " ^ x ^ ")"
    | Valtuple (e1, xs) ->
       "ValTuple (" ^ ast_to_string e1 ^ ", [" ^ separate "; " (fun name -> name) xs ^ "])"

  and ast_typ_to_string e =
    match e with
    | TArrow (t1, t2) ->
       "TArrow (" ^ ast_typ_to_string t1 ^ ", " ^ ast_typ_to_string t2 ^ ")"
    | TProduct xs -> "TProduct [" ^ separate "; " ast_typ_to_string xs ^ "]"
    | TInt -> "TInt"
    | TBool -> "TBool"
    | TVar x ->
       match !x with
       | None -> "TVar None"
       | Some t -> "TVar (Some " ^ ast_typ_to_string t ^ ")"
end





let parse_tests : (string * (string, exp) either) list = [
     ("1;", Right (Int 1));
  ("let fun fact (x : int) : int = if x = 0 then 1 else x * fact(x - 1) in
fact 5 end;", Right (Let ([ Val (Rec ("fact", TArrow (TInt, TInt), 
                                      Fn ("x", Some TInt , If
                                            (Primop (Equals , [Var "x"; Int 0]), Int 1,
                                             Primop (Times , [Var "x"; Apply (Var "fact",
                                                                              Primop (Minus ,
                                                                                      [Var "x"; Int 1]))])))), "fact")],
                          Apply (Var "fact", Int 5))));
  ("1",  Left "Expected SEMICOLON token")
]


let free_vars_tests : (exp * name list) list = [
      (Int 10, []); 
  (Bool true, []); 
  ((Let ([Val (Int 5, "x"); Val (Var "x", "y"); Val (Var "y", "z")], Int 1)), []); 
  ((If (Var "x",
        Let ([Val (Primop (Times, [Var "x"; Var "x"]), "y")],
             Primop (Plus, [Var "y"; Int 1])),
        Primop (Plus, [Var "y"; Var "x"]))), ["y";"x"]);
  ((Let ([Valtuple (Tuple [Int 1; Var "x"; Var "y"], ["x"; "y"; "z"])],
         Primop (Times, [Primop (Times, [Var "x"; Var "y"]); Var "z"]))), ["x";"y"]);
  ((Let ([Val (Int 10, "x"); Val (Var "x", "y")],
         Primop (Plus, [Var "x"; Var "y"]))), []);
  ((Let
      ([Valtuple (Tuple [Var "x"; Var "x1"], ["x1"; "x2"]);
        Valtuple (Tuple [Var "x1"; Var "x2"], ["x3"; "x4"])],
       Int 1)), ["x"; "x1"])
]

let rec free_vars (e : exp) : name list = match e with
  |Var x -> [x]
  |Int _ | Bool _ -> [] 
  |If (e1, e2, e3) -> 
      union (free_vars e1) (union (free_vars e2) (free_vars e3))
  |Primop (_, args) -> 
      List.fold_right (fun e1 -> union (free_vars e1)) args []
  |Apply (e1, e2) -> union (free_vars e1) (free_vars e2)
  |Anno (e1, _) -> free_vars e1 
  |Tuple el -> List.fold_right (fun e1 -> union (free_vars e1)) el []
  |Fn (name, _, e1) -> delete [name] (free_vars e1)
  |Rec (name, _, e1) -> delete [name] (free_vars e1)
  |Let (d::ds, e1) -> (match d with
      |Val (e2, name) -> 
          union (free_vars e2) 
            (delete [name] (free_vars (Let (ds, e1))))
      |ByName (e2, name) -> 
          union (free_vars e2) 
            (delete [name] (free_vars (Let (ds, e1))))
      |Valtuple (e2, n::ns) -> 
          union (free_vars e2) (delete (n::ns) (free_vars (Let (ds, e1)))) 
      |Valtuple (e2, []) -> []
    )
  |Let ([], e1) -> free_vars e1


let unused_vars_tests : (exp * name list) list = [
 ((Let ([Val (Bool true, "x")],
         Let ([Val (Int 4, "y")], Primop (Plus, [Var "x"; Int 5])))), ["y"]);
  ((Let ([Val (Int 3, "x")], Int 4)), ["x"]);
  ((Let ([Val (Int 3, "x")],
         Let ([Val (Int 4, "x")], Primop (Plus, [Var "x"; Var "x"])))), ["x"]);
  ((Let
      ([Val (Rec ("test", TArrow (TInt, TInt), Fn ("x", Some TInt, Int 3)),
             "test")],
       Int 4)), ["x";"test"]);
  (Var "x", []);
  ((Let
      ([Val
          (Rec ("apply", TArrow (TArrow (TInt, TInt), TArrow (TInt, TInt)),
                Fn
                  ("f", Some (TArrow (TInt, TInt)),
                   Fn ("x", Some TInt, Apply (Var "f", Var "x")))),
           "apply")],
       Apply
         (Apply (Var "apply", Fn ("x", None, Primop (Times, [Var "x"; Int 3]))),
          Int 100))), []);
  (Int 10, []);
  (Bool true, []);
  ((Apply (Int 1, Bool false)), []);
  ((Let ([Val (Int 5, "x"); Val (Var "x", "y"); Val (Var "y", "z")], Int 1)), ["z"]);
  ((Let ([Val (Int 1, "x"); Val (Int 2, "x")], Var "x")), ["x"])
]


let rec unused_vars (e : exp) : name list = 
  match e with
  |Fn (name, _, e1) -> 
      delete (free_vars e1) (union [name] (unused_vars e1))
  |Rec (name, _, e1) ->    
      delete (free_vars e1) (union [name] (unused_vars e1))
  |Let (d::ds, e1) -> (match d with
      |Val (e2, name) -> 
          delete (free_vars (Let (ds, e1))) 
            (union (unused_vars e2) (union [name] (unused_vars (Let (ds, e1)))))
      |ByName (e2, name) -> 
          delete (free_vars (Let (ds, e1))) 
            (union (unused_vars e2) (union [name] (unused_vars (Let (ds, e1)))))
      |Valtuple (e2, nl) -> 
          delete (free_vars (Let (ds, e1))) 
            (union (unused_vars e2) (union nl (unused_vars (Let (ds, e1)))))
    ) 
  |Let ([], e1) -> unused_vars e1 
  |_ -> []



let subst_tests : (((exp * name) * exp) * exp) list = [
  (((Var "new","x"), (Let ([(Val(Int 1,"x")) ;(Val(Var "x","y"))],(Primop (Plus,[(Var "x");(Var "y")]))))), 
   (Let ([Val (Int 1, "x"); Val (Var "x", "y")],
         Primop (Plus, [Var "x"; Var "y"])))); 
  (((Int 5, "x"), (If (Bool(true), Var "x", Var "y"))), If (Bool true, Int 5, Var "y"));
  (((Var "ha", "x"),
    (Let ([Val (Int 5, "x"); Val (Var "x", "y"); Val (Var "y", "z")], Int 1))), 
   (Let ([Val (Int 5, "x"); Val (Var "x", "y"); Val (Var "y", "z")], Int 1)));
  (((Var "ha", "w"),
    (Let ([Val (Int 5, "x"); Val (Var "x", "y"); Val (Var "y", "z")], Var "w"))), 
   (Let ([Val (Int 5, "x"); Val (Var "x", "y"); Val (Var "y", "z")], Var "ha")));
  (((Var "ha", "z"),
    (Let ([Val (Int 5, "x"); Val (Var "x", "y"); Val (Var "y", "z")], Var "w"))), 
   (Let ([Val (Int 5, "x"); Val (Var "x", "y"); Val (Var "y", "z")], Var "w")));
  (((Var "new", "apply"), (Let
                             ([Val
                                 (Rec ("apply", TArrow (TArrow (TInt, TInt), TArrow (TInt, TInt)),
                                       Fn
                                         ("f", Some (TArrow (TInt, TInt)),
                                          Fn ("x", Some TInt, Apply (Var "f", Var "x")))),
                                  "apply")],
                              Apply
                                (Apply (Var "apply", Fn ("x", None, Primop (Times, [Var "x"; Int 3]))),
                                 Int 100)))), 
   ((Let
       ([Val
           (Rec ("apply", TArrow (TArrow (TInt, TInt), TArrow (TInt, TInt)),
                 Fn
                   ("f", Some (TArrow (TInt, TInt)),
                    Fn ("x", Some TInt, Apply (Var "f", Var "x")))),
            "apply")],
        Apply
          (Apply (Var "apply", Fn ("x", None, Primop (Times, [Var "x"; Int 3]))),
           Int 100))))); (*valid_program_1 *) 
  (((Primop (Plus, [Var "y"; Int 10]), "m"), (Let
                                                ([Val (Var "m", "x"); Val (Primop (Plus, [Int 1; Var "m"]), "y");
                                                  Val (Var "y", "z")],
                                                 Var "z"))), (Let
                                                                ([Val (Primop (Plus, [Var "y"; Int 10]), "x");
                                                                  Val (Primop (Plus, [Int 1; Primop (Plus, [Var "y"; Int 10])]), "1y");
                                                                  Val (Var "1y", "z")],
                                                                 Var "z")));
  (((Var "ha", "z"), 
    (Let ([Val (Int 2, "x"); Val (Int 3, "y"); Val (Var "z", "z")], Var "z"))),
   (Let ([Val (Int 2, "x"); Val (Int 3, "y"); Val (Var "ha", "z")], Var "z")));
  (((Var "ha", "x"), 
    (Let ([Valtuple (Tuple [Int 1; Int 2; Var "x"], ["x"; "y"; "z"])], Var "x"))),
   (Let ([Valtuple (Tuple [Int 1; Int 2; Var "ha"], ["x"; "y"; "z"])], Var "x")));
]


let rec subst ((e', x) : exp * name) (e : exp) : exp =
  match e with
  | Var y ->
      if x = y then
        e'
      else
        Var y

  | Int _ | Bool _ -> e
  | Primop (po, es) -> Primop (po, List.map (subst (e', x)) es)
  | If (e1, e2, e3) -> If (subst (e', x) e1, subst (e', x) e2, subst (e', x) e3)
  | Tuple es -> Tuple (List.map (subst (e', x)) es)
  | Anno (e, t) -> Anno (subst (e', x) e, t)

  | Let (ds, e2) -> 
      (match ds with 
       |[] -> Let ([], subst (e', x) e2)
       |d::dl -> (match d with 
           |Val (e1, n) -> let e1' = subst (e', x) e1 in 
               if (x = n) then
                 Let (Val (e1', n)::dl, e2)
               else if (member n (free_vars e')) then
                 let n' = fresh_var n in 
                 let e2' = subst (e', x) (subst (Var n', n) (Let (dl, e2))) in
                 begin match e2' with
                   |Let (dd, e3) -> Let (Val (e1', n')::dd, e3)
                   |_ -> e
                 end 
               else 
                 let e2' = subst (e', x) (Let (dl, e2)) in
                 begin match e2' with
                   |Let (dd, e3) -> Let (Val (e1', n)::dd, e3)
                   |_ -> e
                 end 
                  
           |ByName (e1, n) -> let e1' = subst (e', x) e1 in 
               if (x = n) then
                 Let (ByName (e1', n)::dl, e2)
               else if (member n (free_vars e')) then
                 let n' = fresh_var n in 
                 let e2' = subst (e', x) (subst (Var n', n) (Let (dl, e2))) in
                 begin match e2' with
                   |Let (dd, e3) -> Let (ByName (e1', n')::dd, e3)
                   |_ -> e
                 end 
               else 
                 let e2' = subst (e', x) (Let (dl, e2)) in
                 begin match e2' with
                   |Let (dd, e3) -> Let (ByName (e1', n)::dd, e3)
                   |_ -> e
                 end 
                  
           |Valtuple (e1, nl) -> let e1' = subst (e', x) e1 in
               (match nl with 
                |[] -> let e2' = subst (e', x) (Let (dl, e2)) in
                    begin match e2' with
                      |Let (dd, e3) -> Let (Valtuple (e1', nl)::dd, e3)
                      |_ -> e
                    end
                |n::ns -> if (x = n) then 
                      Let (Valtuple (e1', nl)::dl, e2) 
                    else if (member n (free_vars e')) then
                      let n' = fresh_var n in
                      let e2' = 
                        subst (e', x) (subst (Var n', n) 
                                         (Let ((Valtuple (e1', ns))::dl, e2))) 
                      in
                      begin match e2' with
                        |Let (Valtuple (e4, nn)::dd, e3) -> 
                            Let (Valtuple (e1', n'::nn)::dd, e3)
                        |_ -> e
                      end
                    else
                      let e2' = 
                        subst (e', x) (Let ((Valtuple (e1', ns))::dl, e2))
                      in
                      begin match e2' with
                        |Let (Valtuple (e4, nn)::dd, e3) -> 
                            Let (Valtuple (e1', n::nn)::dd, e3)
                        |_ -> e
                      end 
               ) 
         ) 
      ) 
  
  | Apply (e1, e2) -> Apply (subst (e', x) e1, subst (e', x) e2)
  | Fn (y, t, e) -> if (x = y) then Fn (y, t, e)
      else 
      if (member y (free_vars e')) then
        let y' = fresh_var y in
        let e1 = subst (Var y', y) e in
        Fn (y', t, subst (e', x) e1)
      else
        Fn (y, t, subst (e', x) e)
          
  | Rec (y, t, e) -> if (x = y) then Rec (y, t, e) 
      else 
      if (member y (free_vars e')) then
        let y' = fresh_var y in
        let e1 = subst (Var y', y) e in 
        Rec (y', t, subst (e', x) e1)
      else 
        Rec (y, t, subst (e', x) e) 


let eval_tests : (exp * exp) list = [
  ((Primop (And, [Bool true; Int 3])), Int 3);
  ((Let
      ([Val
          (Rec ("f", TArrow (TInt, TInt),
                Fn
                  ("x", Some TInt,
                   Let
                     ([Val (Int 5, "x"); ByName (Primop (Plus, [Var "x"; Int 3]), "y");
                       Val (Int 3, "z")],
                      Primop (Plus, [Primop (Plus, [Var "x"; Var "y"]); Var "z"])))),
           "f")],
       Apply (Var "f", Int 1))), Int 16);
  ((Let
      ([Val (Int 5, "x"); ByName (Primop (Plus, [Var "x"; Int 3]), "y");
        Val (Int 3, "z")],
       Primop (Plus, [Primop (Plus, [Var "x"; Var "y"]); Var "z"]))), Int 16);
]


let rec eval : exp -> exp =
  let bigstep_depth = ref 0 in
  fun e ->
    if !debug >= 1 then
      print_endline
        (String.make (!bigstep_depth) ' '
         ^ "eval (" ^ Print.exp_to_string e ^ ")\n");
    incr bigstep_depth;
    let result =
      match e with
      | Int _ | Bool _ -> e
      | Tuple es -> Tuple (List.map eval es)
      | If (e1, e2, e3) ->
          begin match eval e1 with
            | Bool b ->
                if b then
                  eval e2
                else
                  eval e3
            | _ -> stuck "Condition for if expression should be of the type bool"
          end
      | Anno (e, _) -> eval e     (* types are ignored in evaluation *)
      | Var x -> stuck ("Free variable \"" ^ x ^ "\" during evaluation")

      | Fn (x, t, e) -> Fn (x, t, e)
      | Apply (e1, e2) -> begin match eval e1 with 
          |Fn (x, t, e) -> eval (subst (eval e2, x) e)
          |_ -> stuck "e1 is not a function"
        end
      | Rec (f, t, e) -> eval (subst (Rec (f, t, e), f) e)

      | Primop (And, es) ->
          let vs = List.map eval es in
          begin match vs with
            |[e1; e2] -> begin match e1 with
                |Bool true -> eval e2
                |Bool false -> Bool false
                |_ -> stuck "Not boolean operand"
              end
            |_ -> stuck "bad structure for and operator"
          end
          
      | Primop (Or, es) ->
          let vs = List.map eval es in
          begin match vs with
            |[e1; e2] -> begin match e1 with
                |Bool true -> Bool true
                |Bool false -> eval e2
                |_ -> stuck "Not boolean operand"
              end
            |_ -> stuck "bad structure for and operator"
          end 
          
      | Primop (op, es) ->
          let vs = List.map eval es in
          begin match eval_op op vs with
            | None -> stuck "Bad arguments to primitive operation"
            | Some v -> v
          end

      | Let (ds, e) -> begin match ds with
          |[] -> eval e
          |d::dl -> begin match d with
              |Val (e1, n) -> eval (subst (eval e1, n) (Let (dl, e)))
              |ByName (e1, n) -> eval (subst (e1, n) (Let (dl, e)))
              |Valtuple (e1, nl) -> let vs = eval e1 in
                  begin match vs with
                    |Tuple vs -> 
                        let rec cycle nl vs e = 
                          (match (nl, vs) with
                           |([], []) -> eval e
                           |(n::ns, v::vs) -> 
                               cycle ns vs (subst (v, n) e)
                           |_ -> stuck "no. of args in e1 is different from nl"
                          )
                        in cycle nl vs (Let (dl, e))
                        
                    |_ -> stuck "wrong exp of e1 in let"
                  end
            end
        end
    in

    decr bigstep_depth;
    if !debug >= 1 then
      print_endline
        (String.make (!bigstep_depth) ' '
         ^ "result of eval (" ^ Print.exp_to_string e ^ ") = "
         ^ Print.exp_to_string result ^ "\n");
    result



let infer_tests : ((context * exp) * typ) list = [
  ((Ctx [], (Primop (Plus, [Primop (Times, [Int 10; Int 10]); Int 33]))), TInt);
  (((Ctx [("x",TInt)]), (Let ([Val (Bool true, "x")], Var "x"))), TBool);
  ((Ctx [],(Let
              ([Valtuple
                  (Tuple [Primop (Plus, [Int 2; Int 1]); Primop (Times, [Int 2; Int 50])],
                   ["x"; "y"])],
               Primop (Times, [Primop (Times, [Var "x"; Var "x"]); Var "y"])))), TInt);
  ((Ctx [],(Rec ("apply", TArrow (TArrow (TInt, TInt), TArrow (TInt, TInt)),
                 Fn
                   ("f", Some (TArrow (TInt, TInt)),
                    Fn ("x", Some TInt, Apply (Var "f", Var "x")))))), TArrow (TArrow (TInt, TInt), TArrow (TInt, TInt)));
  
]


let infer (ctx : context) (e : exp) : typ = raise NotImplemented


let unify_tests : ((typ * typ) * unit) list = [
]

(*helper function for unify*)
let rec free_typ t = 
  begin match t with
    |TVar a -> begin match !a with
        |None -> [t]
        |Some b -> free_typ b
      end
    |TArrow (a, b) -> (free_typ a) @ (free_typ b)
    |TProduct l -> begin match l with
        |t::ts -> (free_typ t) @ (free_typ (TProduct ts))
        |[] -> []
      end
    |TInt |TBool -> [] 
  end 
  
    (*helper function to unfold TVar *)
let rec unfold t = 
  begin match t with
    |TVar r -> (match !r with
        |Some t1 -> unfold t1
        |None -> t
      )
    |t -> t
  end


let rec unify (ty1 : typ) (ty2 : typ) : unit = 
  begin match (ty1, ty2) with
    |(TArrow (a1, b1), TArrow (a2, b2)) -> unify a1 a2; unify b1 b2
    |(TProduct l1, TProduct l2) -> begin match (l1, l2) with
        |(t1::ts1, t2::ts2) -> unify t1 t2; unify (TProduct ts1) (TProduct ts2)
        |([], []) -> ()
        |([], t) -> type_fail "different lengths of lists of TProduct (l1 < l2)"
        |(t, []) -> type_fail "different lengths of lists of TProduct (l1 > l2)" 
      end
      
    |(TVar ref1, TVar ref2) -> 
        let v1 = unfold ty1 in
        let v2 = unfold ty2 in 
        if v1 == v2 then ()
        else
          begin match (v1, v2) with
            |(TVar ref1', TVar ref2') -> begin match (!ref1', !ref2') with
                |(None, None) -> ref1' := Some v2 
                |_ -> ()
              end
            |_ -> unify v1 v2
          end 
        
    |(TVar ref1, ty2) -> 
        let t1 = unfold ty1 in
        if (List.memq t1 (free_typ ty2)) then 
          type_fail "unification failed as ty1 is in FV[ty2]"
        else begin match t1 with 
          |TVar ref1 -> begin match !ref1 with
              |None -> ref1 := Some ty2
              |Some t1' -> unify t1' ty2 
            end
          |t1 -> unify t1 ty2
        end 
        
    |(ty1, TVar ref2) -> 
        let t2 = unfold ty2 in
        if (List.memq t2 (free_typ ty1)) then
          type_fail "unification failed as ty2 is in FV[ty1]"
        else begin match t2 with 
          |TVar ref2 -> begin match !ref2 with 
              |None -> ref2 := Some ty1
              |Some t2' -> unify ty1 t2'
            end
          |t2 -> unify ty1 t2
        end 
    |(TInt, TInt) -> ()
    |(TBool, TBool) -> ()
    |_ -> type_fail "unification failed"
  end 


let rec infer (ctx : context) (e : exp) : typ = 
  begin match e with
    |Var x -> ctx_lookup ctx x
    |Int _ -> TInt
    |Bool _ -> TBool 
      
    |If (e, e1, e2) -> 
        (match infer ctx e with 
         |TBool -> let t1 = infer ctx e1 in 
             let t2 = infer ctx e2 in 
             begin match (unify t1 t2) with
               |() -> t1 
               |exception _ -> type_fail "e1 and e2 different type in If"
             end
         |t -> type_fail "e is not bool in If statement")
        
    |Fn (x, t, e) -> begin match t with
        |Some ty -> let ctx = extend ctx (x, ty) in
            let t2 = infer ctx e in
            TArrow (ty, t2)
        |None -> let t = fresh_tvar () in
            let ctx = extend ctx (x, t) in
            let t2 = infer ctx e in
            TArrow (t, t2)
      end
      
    |Rec (x, t, e) -> let ctx = extend ctx (x, t) in
        let t2 = infer ctx e in t2 
        
    |Tuple es -> TProduct (List.map (infer ctx) es)
        
    |Apply (e1, e2) -> let t1 = infer ctx e1 in
        let t2 = infer ctx e2 in
        begin match t1 with
          |TArrow (t, t') -> (match unify t t2 with
              |exception _ -> type_fail "wrong type of e2 in Apply"
              |() -> t') 
          |_ -> type_fail "wrong type of e1 in Apply"
        end
        
    |Anno (e, t) -> let t1 = infer ctx e in
        begin match (unify t1 t) with
          |() -> t
          |exception _ -> type_fail "wrong type of exp in Anno" 
        end
        
    |Primop (po, args) -> 
        let l1 = [Plus; Minus; Times; Div] in
        let l2 = [Equals; NotEquals; LessThan; LessEqual; GreaterThan; GreaterEqual] in 
        let l3 = [And; Or] in
        let ts = List.map (infer ctx) args in
        begin match ts with
          |[t1; t2] -> 
              begin match (unify t1 t2) with
                |() -> begin match (unify TInt t1) with
                    |() -> if (member po l1) then TInt
                        else if (member po l2) then TBool
                        else type_fail "wrong types in Primop" 
                    |exception _ -> begin match (unify TBool t1) with
                        |() -> if (member po l3) then TBool
                            else type_fail "wrong types in Primop1" 
                        |exception _ -> type_fail "wrong types in Primop2"
                      end
                  end 
                |exception _ -> 
                    type_fail "e1 and e2 have different types in Primop"
              end
              
          |[t] -> 
              begin match (unify TInt t) with 
                |exception _ -> type_fail "exp is not int in negate primop"
                |() -> if (po = Negate) then TInt
                    else type_fail "exp is not int in negate primop"
              end
          |_ -> type_fail "wrong number of args in Primop"
        end 
        
    |Let (d::ds, e2) -> begin match d with
        |Val (e1, n) -> let t = infer ctx e1 in 
            let ctx = extend ctx (n, t) in infer ctx (Let (ds, e2)) 
        |ByName (e1, n) -> let t = infer ctx e1 in
            let ctx = extend ctx (n, t) in infer ctx (Let (ds, e2))
        |Valtuple (e1, nl) -> let ts = infer ctx e1 in
            begin match ts with
              |TProduct ts -> 
                  let rec cycle nl ts ctx = 
                    (match (nl, ts) with
                     |([], []) -> infer ctx (Let (ds, e2))
                     |(n::ns, t::ts) -> 
                         let ctx = extend ctx (n, t) in
                         cycle ns ts ctx
                     |_ -> type_fail "no. of args in e1 is different from ns"
                    )
                  in cycle nl ts ctx
                        
              |_ -> type_fail "wrong type of e1 in let"
            end 
      end
        
    |Let ([], e2) -> infer ctx e2 
  end 


let execute (s: string) : unit =
  match P.parse s with
  | Left s -> print_endline ("parsing failed: " ^ s)
  | Right e ->
     try
       (* first we type check the program *)
       ignore (infer (Ctx []) e);
       let result = eval e in
       print_endline ("program is evaluated to: " ^ Print.exp_to_string result)
     with
     | NotImplemented -> print_endline "code is not fully implemented"
     | Stuck s -> print_endline ("evaluation got stuck: " ^ s)
     | NotFound -> print_endline "variable lookup failed"
     | TypeError s -> print_endline ("type error: " ^ s)
     | e -> print_endline ("unknown failure: " ^ Printexc.to_string e)

(************************************************************
 *             Do not change these functions.               *
 *               They are needed for tests.                 *
 ************************************************************)
let list_to_string el_to_string l : string =
  List.fold_left
    begin fun acc el ->
    if acc = "" then
      el_to_string el
    else
      acc ^ "; " ^ el_to_string el
    end
    ""
    l
  |> fun str -> "[" ^ str ^ "]"

let run_test name f ts stringify : unit =
  List.iteri
    begin fun idx (input, expected_output) ->
    try
      let output = f input in
      if output <> expected_output then
        begin
          print_string (name ^ " test #" ^ string_of_int idx ^ " failed\n");
          print_string (stringify output ^ " <> " ^ stringify expected_output)
        end
    with
    | exn ->
       print_string (name ^ " test #" ^ string_of_int idx ^ " raised an exception:\n");
       print_string (Printexc.to_string exn)
    end
    ts

let run_free_vars_tests () : unit =
  run_test "free_vars" free_vars free_vars_tests (list_to_string (fun x -> x))

let run_unused_vars_tests () : unit =
  run_test "unused_vars" unused_vars unused_vars_tests (list_to_string (fun x -> x))

let run_subst_tests () : unit =
  run_test "subst" (fun (s, e) -> subst s e) subst_tests Print.exp_to_string

let run_eval_tests () : unit =
  run_test "eval" eval eval_tests Print.exp_to_string

let run_infer_tests () : unit =
  run_test "infer" (fun (ctx, e) -> infer ctx e) infer_tests Print.typ_to_string

let run_unify_tests () : unit =
  run_test "unify" (fun (ty1, ty2) -> unify ty1 ty2) unify_tests (fun () -> "()")

let run_all_tests () : unit =
  run_free_vars_tests ();
  run_unused_vars_tests ();
  run_subst_tests ();
  run_eval_tests ();
  run_infer_tests ();
  run_unify_tests ()
